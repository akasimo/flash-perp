import { Contract, Keypair, Networks, TransactionBuilder, BASE_FEE, SorobanRpc, nativeToScVal, xdr } from "@stellar/stellar-sdk";
import dotenv from "dotenv";

dotenv.config();

// ------------------------------------------------------------
// Simple helper that queries Reflector oracle contract for the
// latest price of a base asset (e.g. "XLM", "BTC").
// ------------------------------------------------------------

const RPC_URL = process.env.SOROBAN_RPC_URL || "https://soroban-testnet.stellar.org";
const NETWORK_PASSPHRASE = Networks.TESTNET;
const ORACLE_ID = "CCYOZJCOPG34LLQQ7N24YXBM7LL62R7ONMZ3G6WZAAYPB5OYKOMJRN63"; // Reflector Oracle on testnet

async function fetchOraclePrice(assetSym: string) {
  const server = new SorobanRpc.Server(RPC_URL);

  // Temporary throw-away account funded by friendbot (only needed to build a tx)
  const kp = Keypair.random();
  await server.requestAirdrop(kp.publicKey());
  const account = await server.getAccount(kp.publicKey());

  const contract = new Contract(ORACLE_ID);

  // Build read-only invoke transaction calling `lastprice(Asset::Other(Symbol))`
  const assetScVal = nativeToScVal(assetSym, { type: "symbol" });
  // Enum discriminant 0 = Other(Symbol) as generated by soroban-sdk for Asset enum
  const assetEnum = xdr.ScVal.scvVec([assetScVal]);

  const tx = new TransactionBuilder(account, {
    fee: BASE_FEE,
    networkPassphrase: NETWORK_PASSPHRASE,
  })
    .addOperation(contract.call("lastprice", assetEnum))
    .setTimeout(30)
    .build();

  // simulate to get return value without submitting
  const sim = await server.simulateTransaction(tx);
  const result = sim.result?.retVal();
  if (!result) throw new Error("No result from simulation");

  const price = result.i128() as bigint; // price in 1e6 fixed-point
  return price;
}

(async () => {
  const assets = ["XLM", "BTC", "ETH"];
  for (const a of assets) {
    try {
      const p = await fetchOraclePrice(a);
      console.log(`${a} price: ${Number(p) / 1_000_000}`);
    } catch (e) {
      console.error(`Failed to fetch ${a}:`, e);
    }
  }
})(); 